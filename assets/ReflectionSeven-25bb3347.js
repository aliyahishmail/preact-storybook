import"./compat.module-2df6b160.js";import{o as e}from"./jsxRuntime.module-c37c4584.js";import{M as r}from"./index-522c2a66.js";import{u as i}from"./index-d6b1ed49.js";import{k as a}from"./preact.module-a8db4ca9.js";import"./hooks.module-1ffebabd.js";import"./iframe-23a357a4.js";import"../sb-preview/runtime.js";import"./index-d475d2ea.js";import"./_commonjsHelpers-de833af9.js";import"./index-d37d4223.js";import"./index-356e4a49.js";function t(o){const n=Object.assign({h1:"h1",h2:"h2",p:"p"},i(),o.components);return e(a,{children:[e(r,{title:"Reflections/Reflection Seven"}),`
`,e(n.h1,{id:"reflection-seven",children:"REFLECTION SEVEN"}),`
`,e(n.h2,{id:"component-driven-development",children:"Component Driven Development"}),`
`,e(n.p,{children:"Comparing component-driven development using platforms like Storybook and Component Driven to traditional coding approaches is essential to understanding the similarities, differences, opportunities, and risks involved. By comparing these topics, I learned many different perspectives on coding. Both traditional coding and component-driven development rely on the fundamentals of programming and design principles. They involve writing code, creating functions, and structuring data. This process has been highlighted throughout courses in the UXD program. Both approaches aim for code reusability, but the extent and methodology differ. In traditional coding, you can create functions and classes to reuse, while component-driven development focuses on reusing UI components. However, both approaches make coding more efficient. For example, I can reuse the text for metadata and doc type in Visual Studio Code but, I can also drag and drop using editors for UI elements on other platforms."}),`
`,e(n.p,{children:"However, some differences occur when comparing different ways of coding. Traditional coding can involve a broader approach to coding, where you create functions and classes for various purposes. In contrast, component-driven development is more granular, focusing on building and documenting individual UI components. Component-driven development also encourages the isolation of components, allowing for testing and development in isolation. Traditional coding might not emphasize this level of separation. Platforms like Storybook provide robust documentation capabilities tailored to UI components, while traditional coding may require additional effort to document UI elements effectively. One interesting aspect of component-driven development is the integration with design systems and style guides, ensuring consistency and adherence to design standards. Traditional coding may not have this level of integration by default. The isolation of components in platforms like Storybook enables thorough testing, contributing to higher code quality. It also leads to a  more efficient development process by streamlining the process of creating and using UI components. Although, creating UI components for every detail can lead to overengineering, resulting in unnecessary complexity and maintenance overhead. Relying heavily on external platforms like Storybook can introduce a dependency, and if the platform evolves or faces issues, it may impact your development process."}),`
`,e(n.p,{children:"In summary, component-driven development using platforms like Storybook and Component Driven offers the opportunity for increased consistency, reusability, and collaboration. However, it comes with potential challenges such as a learning curve and the need for careful integration into existing processes."})]})}function b(o={}){const{wrapper:n}=Object.assign({},i(),o.components);return n?e(n,Object.assign({},o,{children:e(t,o)})):t(o)}export{b as default};
//# sourceMappingURL=ReflectionSeven-25bb3347.js.map
